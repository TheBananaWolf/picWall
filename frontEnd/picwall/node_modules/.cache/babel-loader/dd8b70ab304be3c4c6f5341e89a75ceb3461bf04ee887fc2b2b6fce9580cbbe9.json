{"ast":null,"code":"var _jsxFileName = \"E:\\\\picWall\\\\frontEnd\\\\picwall\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const url = \"http://127.0.0.1:8080/showmedia\"; // Changed to a more general endpoint name\n  const [mediaSrc, setMediaSrc] = useState(null);\n  const [mediaType, setMediaType] = useState(null);\n  useEffect(() => {\n    const fetchMedia = () => {\n      fetch(url).then(response => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType.startsWith(\"video\")) {\n          setMediaType(\"video\");\n        } else if (contentType.startsWith(\"image/gif\")) {\n          setMediaType(\"gif\");\n        } else if (contentType.startsWith(\"image\")) {\n          setMediaType(\"image\");\n        }\n        return response.blob();\n      }).then(mediaBlob => {\n        const mediaObjectURL = URL.createObjectURL(mediaBlob);\n        setMediaSrc(mediaObjectURL);\n      }).catch(error => {\n        console.error(\"Error fetching the media:\", error);\n        setMediaSrc(null);\n        setMediaType(null);\n      });\n    };\n    fetchMedia();\n    const intervalId = setInterval(fetchMedia, 8000); // Interval can be adjusted based on your needs\n\n    return () => clearInterval(intervalId);\n  }, [url]);\n  const renderMedia = () => {\n    switch (mediaType) {\n      case \"video\":\n        return /*#__PURE__*/_jsxDEV(\"video\", {\n          src: mediaSrc,\n          controls: true,\n          autoPlay: true,\n          loop: true,\n          muted: true,\n          style: {\n            maxHeight: \"100%\",\n            maxWidth: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this);\n      case \"gif\":\n      case \"image\":\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: mediaSrc,\n          alt: \"Dynamic media from server\",\n          style: {\n            maxHeight: \"100%\",\n            maxWidth: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      width: \"100%\",\n      height: 900,\n      textAlign: \"center\"\n    },\n    children: renderMedia()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SOz8ppsjYwAE6ManNC5ywdpQA8E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","url","mediaSrc","setMediaSrc","mediaType","setMediaType","fetchMedia","fetch","then","response","ok","Error","contentType","headers","get","startsWith","blob","mediaBlob","mediaObjectURL","URL","createObjectURL","catch","error","console","intervalId","setInterval","clearInterval","renderMedia","src","controls","autoPlay","loop","muted","style","maxHeight","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","alt","children","className","width","height","textAlign","_c","$RefreshReg$"],"sources":["E:/picWall/frontEnd/picwall/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const url = \"http://127.0.0.1:8080/showmedia\"; // Changed to a more general endpoint name\n  const [mediaSrc, setMediaSrc] = useState(null);\n  const [mediaType, setMediaType] = useState(null);\n\n  useEffect(() => {\n    const fetchMedia = () => {\n      fetch(url)\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error(\"Network response was not ok\");\n          }\n          const contentType = response.headers.get(\"content-type\");\n          if (contentType.startsWith(\"video\")) {\n            setMediaType(\"video\");\n          } else if (contentType.startsWith(\"image/gif\")) {\n            setMediaType(\"gif\");\n          } else if (contentType.startsWith(\"image\")) {\n            setMediaType(\"image\");\n          }\n          return response.blob();\n        })\n        .then((mediaBlob) => {\n          const mediaObjectURL = URL.createObjectURL(mediaBlob);\n          setMediaSrc(mediaObjectURL);\n        })\n        .catch((error) => {\n          console.error(\"Error fetching the media:\", error);\n          setMediaSrc(null);\n          setMediaType(null);\n        });\n    };\n\n    fetchMedia();\n    const intervalId = setInterval(fetchMedia, 8000); // Interval can be adjusted based on your needs\n\n    return () => clearInterval(intervalId);\n  }, [url]);\n\n  const renderMedia = () => {\n    switch (mediaType) {\n      case \"video\":\n        return (\n          <video\n            src={mediaSrc}\n            controls\n            autoPlay\n            loop\n            muted\n            style={{ maxHeight: \"100%\", maxWidth: \"100%\" }}\n          />\n        );\n      case \"gif\":\n      case \"image\":\n        return (\n          <img\n            src={mediaSrc}\n            alt=\"Dynamic media from server\"\n            style={{ maxHeight: \"100%\", maxWidth: \"100%\" }}\n          />\n        );\n      default:\n        return <p>Loading...</p>;\n    }\n  };\n\n  return (\n    <div\n      className=\"App\"\n      style={{ width: \"100%\", height: 900, textAlign: \"center\" }}\n    >\n      {renderMedia()}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,GAAG,GAAG,iCAAiC,CAAC,CAAC;EAC/C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMU,UAAU,GAAGA,CAAA,KAAM;MACvBC,KAAK,CAACN,GAAG,CAAC,CACPO,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,MAAMC,WAAW,GAAGH,QAAQ,CAACI,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QACxD,IAAIF,WAAW,CAACG,UAAU,CAAC,OAAO,CAAC,EAAE;UACnCV,YAAY,CAAC,OAAO,CAAC;QACvB,CAAC,MAAM,IAAIO,WAAW,CAACG,UAAU,CAAC,WAAW,CAAC,EAAE;UAC9CV,YAAY,CAAC,KAAK,CAAC;QACrB,CAAC,MAAM,IAAIO,WAAW,CAACG,UAAU,CAAC,OAAO,CAAC,EAAE;UAC1CV,YAAY,CAAC,OAAO,CAAC;QACvB;QACA,OAAOI,QAAQ,CAACO,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,CACDR,IAAI,CAAES,SAAS,IAAK;QACnB,MAAMC,cAAc,GAAGC,GAAG,CAACC,eAAe,CAACH,SAAS,CAAC;QACrDd,WAAW,CAACe,cAAc,CAAC;MAC7B,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDnB,WAAW,CAAC,IAAI,CAAC;QACjBE,YAAY,CAAC,IAAI,CAAC;MACpB,CAAC,CAAC;IACN,CAAC;IAEDC,UAAU,CAAC,CAAC;IACZ,MAAMkB,UAAU,GAAGC,WAAW,CAACnB,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;;IAElD,OAAO,MAAMoB,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,CAACvB,GAAG,CAAC,CAAC;EAET,MAAM0B,WAAW,GAAGA,CAAA,KAAM;IACxB,QAAQvB,SAAS;MACf,KAAK,OAAO;QACV,oBACEN,OAAA;UACE8B,GAAG,EAAE1B,QAAS;UACd2B,QAAQ;UACRC,QAAQ;UACRC,IAAI;UACJC,KAAK;UACLC,KAAK,EAAE;YAAEC,SAAS,EAAE,MAAM;YAAEC,QAAQ,EAAE;UAAO;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CAAC;MAEN,KAAK,KAAK;MACV,KAAK,OAAO;QACV,oBACEzC,OAAA;UACE8B,GAAG,EAAE1B,QAAS;UACdsC,GAAG,EAAC,2BAA2B;UAC/BP,KAAK,EAAE;YAAEC,SAAS,EAAE,MAAM;YAAEC,QAAQ,EAAE;UAAO;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CAAC;MAEN;QACE,oBAAOzC,OAAA;UAAA2C,QAAA,EAAG;QAAU;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;IAC5B;EACF,CAAC;EAED,oBACEzC,OAAA;IACE4C,SAAS,EAAC,KAAK;IACfT,KAAK,EAAE;MAAEU,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,GAAG;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAJ,QAAA,EAE1Dd,WAAW,CAAC;EAAC;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV;AAACvC,EAAA,CA1EQD,GAAG;AAAA+C,EAAA,GAAH/C,GAAG;AA4EZ,eAAeA,GAAG;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}